// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Ekm.Mobile.Services.Dtos
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class OrderItem
    {
        /// <summary>
        /// Initializes a new instance of the OrderItem class.
        /// </summary>
        public OrderItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OrderItem class.
        /// </summary>
        public OrderItem(long id, double itemDelivery, double itemDiscount, string itemName, string itemOptions, string itemOrderNote, double itemPrice, double itemTax, int itemTaxId, double itemTaxRate, string orderNumber, long quantity, long originalItemId, long orderId, Product product = default(Product))
        {
            Id = id;
            ItemDelivery = itemDelivery;
            ItemDiscount = itemDiscount;
            ItemName = itemName;
            ItemOptions = itemOptions;
            ItemOrderNote = itemOrderNote;
            ItemPrice = itemPrice;
            ItemTax = itemTax;
            ItemTaxId = itemTaxId;
            ItemTaxRate = itemTaxRate;
            OrderNumber = orderNumber;
            Quantity = quantity;
            OriginalItemId = originalItemId;
            OrderId = orderId;
            Product = product;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "item_delivery")]
        public double ItemDelivery { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "item_discount")]
        public double ItemDiscount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "item_name")]
        public string ItemName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "item_options")]
        public string ItemOptions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "item_order_note")]
        public string ItemOrderNote { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "item_price")]
        public double ItemPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "item_tax")]
        public double ItemTax { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "item_tax_id")]
        public int ItemTaxId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "item_tax_rate")]
        public double ItemTaxRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "order_number")]
        public string OrderNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "quantity")]
        public long Quantity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "original_item_id")]
        public long OriginalItemId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "order_id")]
        public long OrderId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "product")]
        public Product Product { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ItemName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ItemName");
            }
            if (ItemOptions == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ItemOptions");
            }
            if (ItemOrderNote == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ItemOrderNote");
            }
            if (OrderNumber == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OrderNumber");
            }
            if (Product != null)
            {
                Product.Validate();
            }
        }
    }
}
