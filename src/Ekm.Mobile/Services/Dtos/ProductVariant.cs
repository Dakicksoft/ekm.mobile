// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Ekm.Mobile.Services.Dtos
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ProductVariant
    {
        /// <summary>
        /// Initializes a new instance of the ProductVariant class.
        /// </summary>
        public ProductVariant()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProductVariant class.
        /// </summary>
        public ProductVariant(long? id = default(long?), long? parentProductId = default(long?), string productCode = default(string), bool? isDefaultVariant = default(bool?), long? numberInStock = default(long?), double? price = default(double?), string condition = default(string), string gtin = default(string), string mpn = default(string), bool? live = default(bool?), IList<VariantCombination> variantCombinations = default(IList<VariantCombination>))
        {
            Id = id;
            ParentProductId = parentProductId;
            ProductCode = productCode;
            IsDefaultVariant = isDefaultVariant;
            NumberInStock = numberInStock;
            Price = price;
            Condition = condition;
            Gtin = gtin;
            Mpn = mpn;
            Live = live;
            VariantCombinations = variantCombinations;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parent_product_id")]
        public long? ParentProductId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "product_code")]
        public string ProductCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "is_default_variant")]
        public bool? IsDefaultVariant { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "number_in_stock")]
        public long? NumberInStock { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "price")]
        public double? Price { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "condition")]
        public string Condition { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gtin")]
        public string Gtin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mpn")]
        public string Mpn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "live")]
        public bool? Live { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "variant_combinations")]
        public IList<VariantCombination> VariantCombinations { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Price < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Price", 0);
            }
            if (VariantCombinations != null)
            {
                foreach (var element in VariantCombinations)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
