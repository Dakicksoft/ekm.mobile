// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Ekm.Mobile.Services.Dtos
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class AddProductOption
    {
        /// <summary>
        /// Initializes a new instance of the AddProductOption class.
        /// </summary>
        public AddProductOption()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AddProductOption class.
        /// </summary>
        public AddProductOption(string name, long? id = default(long?), long? productId = default(long?), bool? isRequired = default(bool?), string type = default(string), int? size = default(int?))
        {
            Id = id;
            ProductId = productId;
            Name = name;
            IsRequired = isRequired;
            Type = type;
            Size = size;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "product_id")]
        public long? ProductId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "is_required")]
        public bool? IsRequired { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public int? Size { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Size < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Size", 1);
            }
        }
    }
}
