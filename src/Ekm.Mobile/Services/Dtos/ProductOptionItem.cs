// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Ekm.Mobile.Services.Dtos
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ProductOptionItem
    {
        /// <summary>
        /// Initializes a new instance of the ProductOptionItem class.
        /// </summary>
        public ProductOptionItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProductOptionItem class.
        /// </summary>
        public ProductOptionItem(string name, long? id = default(long?), long? productOptionId = default(long?), double? price = default(double?), bool? isPlaceholder = default(bool?))
        {
            Id = id;
            ProductOptionId = productOptionId;
            Name = name;
            Price = price;
            IsPlaceholder = isPlaceholder;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "product_option_id")]
        public long? ProductOptionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "price")]
        public double? Price { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "is_placeholder")]
        public bool? IsPlaceholder { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Price < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Price", 0);
            }
        }
    }
}
